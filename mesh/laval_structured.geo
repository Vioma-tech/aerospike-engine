
// SetFactory("OpenCASCADE");
gridsize_s = 0.001;
gridsize_By = 0.0025;
gridsize_Bx = 0.002;
gridsize_B = 0.008;

x = {0.0, 0.05, 0.050922488300214876, 0.05184497660042974, 0.052767464900644614, 0.05368995320085948, 0.05461244150107435, 0.05553492980128922, 0.05645741810150409, 0.05737990640171896, 0.05830239470193383, 0.059224883002148704, 0.06014737130236357, 0.061069859602578436, 0.06199234790279331, 0.06291483620300818, 0.06383732450322305, 0.06475981280343791, 0.0656823011036528, 0.06660478940386766, 0.06752727770408253, 0.06844976600429739, 0.06937225430451227, 0.07029474260472714, 0.071217230904942, 0.07213971920515688, 0.07306220750537175, 0.07398469580558661, 0.0749071841058015, 0.07582967240601636, 0.07675216070623123, 0.07767464900644609, 0.07859713730666096, 0.07951962560687584, 0.0804421139070907, 0.08136460220730557, 0.08228709050752045, 0.08320957880773532, 0.08413206710795018, 0.08505455540816506, 0.08597704370837991, 0.0868995320085948, 0.08782202030880966, 0.08874450860902452, 0.0896669969092394, 0.09058948520945427, 0.09150622691845116, 0.09242296862744803, 0.09333971033644492, 0.09425645204544181, 0.0951731937544387, 0.09608993546343558, 0.09700667717243247, 0.09792341888142936, 0.09884016059042625, 0.09975690229942312, 0.10067364400842001, 0.1015903857174169, 0.10250712742641377, 0.10342386913541066};
y = {0.024517759651274465, 0.024517759651274465, 0.02450618819484529, 0.024471451952861677, 0.024413485099990896, 0.0243321772319309, 0.02422737230600691, 0.02409886712476579, 0.023946409327704817, 0.023769694843874846, 0.023568364743657248, 0.023342001410807015, 0.02309012393495987, 0.022812182599016254, 0.02250755230354607, 0.02217552472946157, 0.021815298987758157, 0.021425970437087848, 0.021006517260661176, 0.0205557842754616, 0.020072463287489253, 0.019555148209065634, 0.019022549340612302, 0.018489950472158963, 0.01795735160370563, 0.017424752735252298, 0.01689215386679896, 0.01635955499834562, 0.015826956129892288, 0.015294357261438955, 0.014761758392985616, 0.014229159524532284, 0.013696560656078945, 0.013163961787625612, 0.01263136291917228, 0.012111814820503292, 0.01165090396840453, 0.011248416214385153, 0.010900542267441159, 0.010604252921417139, 0.010357142889386741, 0.010157319526434169, 0.010003322948640425, 0.00989406892243459, 0.009828808937424126, 0.009807103860509786, 0.009893560590159656, 0.01016278155232664, 0.010599042189589285, 0.011027276829123266, 0.011426997659652972, 0.011798204681178391, 0.012140897893699494, 0.012455077297216323, 0.012740742891728843, 0.012997894677237082, 0.01322653265374104, 0.013426656821240682, 0.013598267179736043, 0.013741363729227109};

L = x[#x[]-1];
R = y[#y[]-1];

Point(1) = {0, 0, 0, gridsize_s};
Point(2) = {L, 0, 0, gridsize_s};
// Point(3) = {L, R, 0, gridsize_s};
// Point(4) = {0, R, 0, gridsize_s};

pList[0] = 1;
For i In {0: #x[]-1}
    pList[i] = newp;
    Point(pList[i]) = {x[i], y[i], 0, gridsize_s};
EndFor
BSpline(2001) = pList[];

o1 = 0.005;
o2 = 0.02;

A  = 6*R;
B  = 4*A;




Point(1001) = {L+B, 0, 0, gridsize_B};
Point(10010) = {L+B, R, 0, gridsize_B};
Point(10015) = {L+B, R+o1, 0, gridsize_B};

Point(1002) = {L+B, A, 0, gridsize_B};
Point(10025) = {L, A, 0, gridsize_B};
Point(1003) = {L-o2, A, 0, gridsize_B};
Point(1004) = {L-o2, R+o1, 0, gridsize_B};
Point(1005) = {L, R+o1, 0, gridsize_Bx};


Line(1) = {1, 2};
Line(2) = {2, pList[#pList[] - 1]};
Line(4) = {pList[0], 1};

Line(5) = {2, 1001};
Line(6) = {1001,10010};
Line(7) = {10010, pList[#pList[] - 1]};

Line(8) = {10010, 10015};
Line(9) = {10015, 1002};
Line(10) = {1002, 10025};
Line(11) = {10025, 1003};
Line(12) = {1003, 1004};
Line(13) = {1004, 1005};
Line(14) = {1005, pList[#pList[] - 1]};
Line(15) = {10015, 1005};
Line(16) = {10025, 1005};
// Line(14) = {10015, 1005};



Line Loop(101) = {1, 2, -2001, 4};
Line Loop(102) = {5, 6, 7, -2};
Line Loop(103) = {8, 15, 14, -7};
Line Loop(104) = {9, 10, 16, -15};
Line Loop(105) = {11, 12, 13, -16};
// // Line Loop(110) = {1, 5, 6, 8, 9, 10, 11, 12, -2001, 4};
// // Line Loop(104) = {}

Plane Surface(1) = 101;
Plane Surface(2) = 102;
Plane Surface(3) = 103;
Plane Surface(4) = 104;
Plane Surface(5) = 105;

Transfinite Line{4, 2} = Ceil(R/gridsize_s);
Transfinite Line{2001, 1} = Ceil(L/gridsize_s);


Transfinite Line{2, 6} = Ceil(R/gridsize_s);
Transfinite Line{5, 7} = Ceil((B)/gridsize_Bx);


Transfinite Line{7, 15} = Ceil((B)/gridsize_Bx);
Transfinite Line{8, 14} = Ceil((o1)/gridsize_s);

// Transfinite Line{15, 10} = Ceil((B)/gridsize_Bx);
// Transfinite Line{12, 16, 9} = Ceil((A - o1 - R)/gridsize_By);
// Transfinite Line{11, 13} = Ceil((o2)/gridsize_Bx);


// Transfinite Surface{1};
// Recombine Surface{1};


Transfinite Surface{1, 2, 3};
Recombine Surface{1, 2, 3, 4, 5};

// 
// Transfinite Surface{1, 2, 3, 4, 5};
// Recombine Surface{1, 2, 3, 4, 5};

Rotate {{1,0,0},{0,0,0},2.5*Pi/180.0}
{
	Surface{1,2,3, 4, 5};
    // Recombine;
}
extr[] = Extrude { {1,0.0,0}, {0,0.0,0.0},  -5*Pi/180.0} { 
    Surface{1, 2, 3, 4, 5}; 
    Layers{1};
    Recombine;
};
Coherence;



// Color Brown {Surface{extr[24]};} // wall

Physical Surface("wedge0", 1) = {extr[0], extr[5], extr[10], extr[16], extr[22]};
Physical Surface("wedge1", 2) = {extr[1], extr[6], extr[11], extr[17], extr[23]};
Physical Surface("atm1", 3) = {extr[7], extr[12], extr[18]};
Physical Surface("atm2", 4) = {extr[19], extr[24]};
Physical Surface("atm3", 5) = {extr[25]};
Physical Surface("wall", 6) = {extr[3], extr[14], extr[26]};
Physical Surface("inlet", 7) = {extr[4]};

Physical Volume("vol1", 10000) = {1, 2, 3, 4, 5};
// Physical Surface("inlet", 1001) = {inlet_s};
// // Physical Surface("outlet", 1002) = {outlet_s};
// // Physical Surface("wall", 1003) = {extr[3]};
// Physical Surface("wedge0", 1) = {extr[0], extr[5], extr[10]};
// Physical Surface("wedge1", 2) = {extr[1], extr[6], extr[11]};
// Physical Surface("atm1", 3) = {extr[7], extr[12], extr[13]};
// Physical Surface("atm2", 4) = {extr[14]};
// Physical Surface("atm3", 5) = {extr[15]};
// Physical Surface("wall", 7) = {extr[3], extr[16], extr[17]};
// Physical Surface("inlet", 8) = {extr[4]};